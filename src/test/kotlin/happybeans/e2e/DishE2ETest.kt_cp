//package happybeans.e2e
//
//import com.fasterxml.jackson.databind.ObjectMapper
//import happybeans.TestFixture
//import happybeans.dto.dish.DishCreateRequest
//import happybeans.model.Restaurant
//import happybeans.repository.RestaurantRepository
//import org.junit.jupiter.api.BeforeEach
//import org.junit.jupiter.api.Test
//import org.springframework.beans.factory.annotation.Autowired
//import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase
//import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureWebMvc
//import org.springframework.boot.test.context.SpringBootTest
//import org.springframework.http.MediaType
//import org.springframework.test.context.ActiveProfiles
//import org.springframework.test.web.servlet.MockMvc
//import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get
//import org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post
//import org.springframework.test.web.servlet.result.MockMvcResultMatchers.status
//import org.springframework.transaction.annotation.Transactional
//
//@SpringBootTest
//@AutoConfigureWebMvc
//@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.ANY)
//@ActiveProfiles("test")
//@Transactional
//class DishE2ETest {
//    @Autowired
//    private lateinit var mockMvc: MockMvc
//
//    @Autowired
//    private lateinit var objectMapper: ObjectMapper
//
//    @Autowired
//    private lateinit var restaurantRepository: RestaurantRepository
//
//    private lateinit var restaurant: Restaurant
//
//    @BeforeEach
//    fun setUp() {
//        restaurant = restaurantRepository.save(TestFixture.createHappyBeansCafe())
//    }
//
//    @Test
//    fun `should return 404 when retrieving non-existent dish`() {
//        mockMvc.perform(get("/api/dish/999999"))
//            .andExpect(status().isNotFound)
//    }
//
//    @Test
//    fun `should return 404 when creating dish for non-existent restaurant`() {
//        val dishRequest =
//            DishCreateRequest(
//                name = "Test Pizza",
//                description = "A delicious test pizza",
//                image = "https://example.com/pizza.jpg",
//                dishOptionRequests = mutableSetOf(),
//            )
//
//        mockMvc.perform(
//            post("/api/dish/restaurant/999999")
//                .contentType(MediaType.APPLICATION_JSON)
//                .content(objectMapper.writeValueAsString(dishRequest)),
//        )
//            .andExpect(status().isNotFound)
//    }

//
//    @Test
//    fun `should create dish with options and retrieve it`() {
//        // Given
//        val dishRequest = DishCreateRequest(
//            name = "Test Pizza",
//            description = "A delicious test pizza",
//            image = "https://example.com/pizza.jpg",
//            dishOptionRequests = setOf(
//                DishOptionCreateRequest(
//                    name = "Small Pizza",
//                    description = "Perfect for one person",
//                    price = 15.99,
//                    image = "https://example.com/small-pizza.jpg",
//                    prepTimeMinutes = 20,
//                    rating = 4.5
//                )
//            )
//        )
//
//        // When & Then - Create dish
//        val createResult = mockMvc.perform(
//            post("/api/dish/restaurant/${restaurant.id}")
//                .contentType(MediaType.APPLICATION_JSON)
//                .content(objectMapper.writeValueAsString(dishRequest))
//        )
//            .andExpect(status().isCreated)
//            .andExpect(jsonPath("$.message").value("Dish created successfully"))
//            .andReturn()
//
//        // Extract dish ID from location header
//        val location = createResult.response.getHeader("Location")
//        val dishId = location?.substringAfterLast("/")?.toLong()
//
//        // Then - Retrieve created dish
//        mockMvc.perform(get("/api/dish/$dishId"))
//            .andExpect(status().isOk)
//            .andExpect(jsonPath("$.name").value("Test Pizza"))
//            .andExpect(jsonPath("$.description").value("A delicious test pizza"))
//            .andExpect(jsonPath("$.dishOptions").isArray)
//            .andExpect(jsonPath("$.dishOptions[0].name").value("Small Pizza"))
//            .andExpect(jsonPath("$.dishOptions[0].price").value(15.99))
//    }
//
//    @Test
//    fun `should retrieve dishes by restaurant`() {
//        // Given - Create a dish first
//        val dishRequest = DishCreateRequest(
//            name = "Restaurant Special",
//            description = "Our signature dish",
//            image = "https://example.com/special.jpg",
//            dishOptionRequests = setOf(
//                DishOptionCreateRequest(
//                    name = "Regular Special",
//                    description = "Standard portion",
//                    price = 25.00,
//                    image = "https://example.com/regular-special.jpg",
//                    prepTimeMinutes = 30,
//                    rating = 4.8
//                )
//            )
//        )
//
//        mockMvc.perform(
//            post("/api/dish/restaurant/${restaurant.id}")
//                .contentType(MediaType.APPLICATION_JSON)
//                .content(objectMapper.writeValueAsString(dishRequest))
//        )
//            .andExpect(status().isCreated)
//
//        // When & Then - Retrieve dishes by restaurant
//        mockMvc.perform(get("/api/restaurants/${restaurant.id}/dishes"))
//            .andExpect(status().isOk)
//            .andExpect(jsonPath("$").isArray)
//            .andExpect(jsonPath("$[0].name").value("Restaurant Special"))
//    }
}
